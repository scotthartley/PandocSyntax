%YAML 1.2
---
name: Pandoc
file_extensions: [pandoc, pd, md, markdown]
scope: text.html.markdown
comment: Scopes set for compatibility with Monokai Extended.

variables:
  sp_punc: \s|\.|,|;|:|'|"|\(|\)

contexts:
  main:
    - match: ^(?=\#) # Allows file to start with header.
      push: blank_line
    - match: (?=\n)
      push: body

  body:
    - match: ^$
      push: blank_line

  prototype:
    - include: comment
    - include: text_formatting
    - include: yaml
    - include: inline-links-citations-etc

  inline-links-citations-etc:
    - include: figures
    - include: tables
    - include: links
    - include: citations
    - include: footnotes
    - include: pandoc-filters
    - include: latex

  text_formatting:
    - include: bold
    - include: italics
    - include: verbatim
    - include: math
    - include: subscript
    - include: superscript
    - include: strikethrough

  pandoc-filters:
    - include: pandoc-figref
    - include: pandoc-chem-struct
    - include: pandoc-cmpdnames
    - include: pandoc-include

  blank_line:
    - include: unnumbered_list
    - include: numbered_list
    - include: lettered_list
    - match: ^(\#)\s(.*)(\{.*\})$
      captures:
        1: comment.block.html
        2: markup.heading.1.markdown
        3: comment.block.html
      pop: true
    - match: ^(\#)\s(.*)
      captures:
        1: comment.block.html
        2: markup.heading.1.markdown
      pop: true
    - match: ^(\#\#)\s(.*)(\{.*\})$
      captures:
        1: comment.block.html
        2: markup.heading.1.markdown
        3: comment.block.html
      pop: true
    - match: ^(\#\#)\s(.*)
      captures:
        1: comment.block.html
        2: markup.heading.2.markdown
      pop: true
    - match: ^(\#\#\#)\s(.*)(\{.*\})$
      captures:
        1: comment.block.html
        2: markup.heading.1.markdown
        3: comment.block.html
      pop: true
    - match: ^(\#\#\#)\s(.*)
      captures:
        1: comment.block.html
        2: markup.heading.3.markdown
      pop: true
    - match: ^(\#\#\#\#)\s(.*)(\{.*\})$
      captures:
        1: comment.block.html
        2: markup.heading.1.markdown
        3: comment.block.html
      pop: true
    - match: ^(\#\#\#\#)\s(.*)
      captures:
        1: comment.block.html
        2: markup.heading.4.markdown
      pop: true
    - match: ^\s*(\>) # Block quote
      scope: comment.block.html
      push: # Allows "lazy" block quotes but continues to comment leading >
        - match: ^\s*\>
          scope: comment.block.html
        - meta_scope: markup.quote.markdown
        - match: ^$
          pop: true
    - match: ^(\| )(?!.*[^\\]\|)  # Line block (highlighted as block quote)
      scope: comment.block.html
      push:
        - match: ^\|
          scope: comment.block.html
        - meta_scope: markup.quote.markdown
        - match: ^$
          pop: true
    - match: ^ {4}.*  # Verbatim (code) block
      scope: markup.raw.block.markdown
      pop: true
    - match: ^(~~~|```).*  # Fenced code block
      scope: comment.block.html
      push:
        - meta_include_prototype: false
        - meta_scope: markup.raw.block.markdown
        - match: ^(?:~~~|```).*
          scope: comment.block.html
          pop: true
    - match: (?=^.*)
      pop: true

  comment:
    - match: '<!--'
      push:
      - meta_include_prototype: false
      - meta_scope: comment.block.markdown
      - match: '-->'
        pop: true

  bold:
    - match: \*\*(?!\s)|(?<=\s|^)__(?!\s) # Only if spaces before/after underscores.
      scope: comment.block.html
      push:
        - include: inline-links-citations-etc
        - include: superscript
        - include: subscript
        - meta_scope: markup.bold.markdown
        - match: \*\*(?!\*)|(?<!\s)__(?={{sp_punc}})
          scope: comment.block.html
          pop: true

  italics:
    - match: '(?<!\\)\*(?!_|\s|\.)|(?<=\s|^)_(?!_|\s)'
      scope: comment.block.html
      push:
        - include: inline-links-citations-etc
        - include: superscript
        - include: subscript
        - meta_scope: markup.italic.markdown
        - match: (?<!\*)\*(?!\*)|(?<!_)_(?={{sp_punc}})
          scope: comment.block.html
          pop: true

  verbatim:
    - match: '(?<!`)`(?!`+)'
      scope: comment.block.html
      push:
        - meta_scope: markup.raw.inline.markdown
        - match: '`'
          scope: comment.block.html
          pop: true

  math:
    - match: (\$\$?)(?!\s)([^\$]*)(?<!\s)(\$\$?)(?![0-9])(\{[^\}]*\})?
      captures:
        1: comment.block.html
        2: markup.raw.block.markdown
        3: comment.block.html
        4: comment.block.html # Attributes

  subscript:
    - match: (?<!\\)(?<!~)(~)[^~]+(~)
      captures:
        1: comment.block.html
        2: comment.block.html

  strikethrough:
    - match: (?<!\\)(~~).+(~~)
      captures:
        1: comment.block.html
        2: comment.block.html

  superscript:
    - match: (\^)[^\[\^]*(\^)
      captures:
        1: comment.block.html
        2: comment.block.html

  yaml:
    - match: '^---$'
      push:
      - meta_include_prototype: false
      - meta_scope: markup.raw.block.markdown
      - match: ^(?:---|\.\.\.)
        pop: true

  unnumbered_list:
    - match: ^\s*((?:-|\*|\+))[^-]\s*
      push:
        - include: comment
        - include: text_formatting
        - meta_scope: markup.list.unnumbered.markdown
        - match: (?=^\s*$)
          set:
            - meta_scope: markup.list.unnumbered.markdown
            - include: text_formatting
              # Subsequent paragraphs included in lists must be fully indented by >=4 spaces.
            - match: (?=^\s{0,3}[^\s])
              pop: true

  numbered_list:
    - match: ^\d+\.\s*
      push:
        - include: comment
        - include: text_formatting
        - meta_scope: markup.list.numbered.markdown
        - match: (?=^\s*$)
          set:
            - meta_scope: markup.list.numbered.markdown
            - include: text_formatting
            - match: (?=^\s{0,3}[^\s])
              pop: true

  lettered_list:
    - match: ^\(?[a-z,A-Z]+[\.\)]\s*
      push:
        - include: comment
        - include: text_formatting
        - meta_scope: markup.list.numbered.markdown
        - match: (?=^\s*$)
          set:
            - meta_scope: markup.list.numbered.markdown
            - include: text_formatting
            - match: (?=^\s{0,3}[^\s])
              pop: true

  links:
    - match: (?:^|\(|\s)(<)([^\s|!][^>]*)(>)(?={{sp_punc}}|\))     # Automatic link (also html tags)
      captures:
        1: comment.block.html
        2: string.other.link.title.markdown
        3: comment.block.html
    - match: (\[)([^\s][^\]]*)(\]\()([^\)]*)(\))                  # Inline link
      captures:
        1: comment.block.html
        2: string.other.link.title.markdown
        3: comment.block.html
        4: markup.underline.link.markdown
        5: comment.block.html
    - match: (\[)([^\s][^\]]*)(\]\s?\[)([^\]]*)(\])       # Reference link
      captures:
        1: comment.block.html
        2: string.other.link.title.markdown
        3: comment.block.html
        4: constant.other.reference.link.markdown
        5: comment.block.html
    - match: ^\s*(\[)([^^].*)(\]\:)([^\{]*)(\{.*\})?      # Reference link definition w attributes
      captures:
        1: comment.block.html
        2: constant.other.reference.link.markdown
        3: comment.block.html
        4: markup.underline.link.markdown
        5: comment.block.html
    - match: (?:^|\s)(?<!\]\s)(\[)([^\^|\-@][^\]@]*)(\])(?![\(\[])(?={{sp_punc}})    # Shortcut reference link
      captures:
        1: comment.block.html
        2: string.other.link.title.markdown
        3: comment.block.html

  figures:
    - match: \!\[
      scope: comment.block.html
      push:
      - include: text_formatting
      - include: pandoc-filters
      - meta_scope: string.other.link.description.markdown
      - match: \[    # Allow one set of embedded brackets.
        push:
        - match: \]
          pop: true
      - match: ^\s*$
        pop: true
      - match: \]\s   # Must be a shortcut ref figure.
        scope: comment.block.html
        pop: true
      - match: \]\(
        scope: comment.block.html
        set:
          - meta_scope: markup.underline.link.markdown
          - match: \)(\{[^\}]*\})? # Allows optional figure attributes
            scope: comment.block.html
            pop: true

  tables:
    - match: ^(\| )(?=.*\|)  # Table
      scope: comment.block.html
      push:
        - include: text_formatting
        - include: pandoc-filters
        - match: \|
          scope: comment.block.html
        - match: '(?<!\w)[\-\:](?!.*\w)'
          scope: comment.block.html
        - match: (?=^[^\|])
          pop: true
    - match: "^(Table)?:"
      scope: comment.block.html
      push:
        - include: text_formatting
        - include: pandoc-filters
        - meta_scope: string.other.link.description.markdown
        - match: \{[^\}]*\}$
          scope: comment.block.html
        - match: ^$
          pop: true

  footnotes:
    - match: (\[\^)([^\]]*?)(\])[^\:]              # Footnote marker
      captures:
        1: comment.block.html
        2: constant.other.reference.link.markdown
        3: comment.block.html
    - match: ^\s*(\[\^)(.*)(\]\:)   # Footnote definition
      captures:
        1: comment.block.html
        2: constant.other.reference.link.markdown
        3: comment.block.html
      push: # Only allows subsequent pars if all indented. Not strictly correct.
        - include: text_formatting
        - include: inline-links-citations-etc
        - meta_scope: string.other.link.description.markdown
        - match: (?=^\s*$)
          set:
            - meta_scope: string.other.link.description.markdown
            - match: (?=^\s{0,3}[^\s])
              pop: true
    - match: \^\[                   # Inline notes
      scope: comment.block.html
      push:
        - include: citations
        - meta_scope: string.other.link.description.markdown
        - match: \[
          push:
          - include: citations
          - match: \]
            pop: true
        - match: \]
          scope: comment.block.html
          pop: true

  citations:
    - match: (\[)([^\]]*\@) # The @ can be anywhere in the link.
      captures:
        1: comment.block.html
        2: constant.other.reference.link.markdown
      push:
        - meta_scope: constant.other.reference.link.markdown
        - match: \[ # Can ref pages in brackets within citation.
          push:
            - meta_scope: constant.other.reference.link.markdown
            - match: \]
              pop: true
        - match: \]
          scope: comment.block.html
          pop: true
    - match: (\s|^|-|/)(\@[\w:-]*\w)(\s?\[([^\]]*)\])? # Without opening bracket
      captures:
        2: constant.other.reference.link.markdown
        3: comment.block.html # Allows [] to close citation to separate
        4: constant.other.reference.link.markdown

  latex:
    - match: \\begin\{(\w*)\}.*
      scope: comment.block.html
      push:
        - meta_scope: markup.raw.block.markdown
        - match: \\end\{\1\}
          scope: comment.block.html
          pop: true
    - match: \\\w+((\{[^\}]*\})|(\[[^\]]*\]))*
      scope: comment.block.html

  pandoc-figref:
    - match: (\{\#\D\:)([^\}]*)(\})
      captures:
        1: comment.block.html
        2: constant.other.reference.link.markdown
        3: comment.block.html

  pandoc-chem-struct:
    - match: (s\:\{)([^\}]*)(\})
      captures:
        1: comment.block.html
        3: comment.block.html

  pandoc-cmpdnames:
    - match: (?<!s\:)(\{)([\w\(\)-\[\]]*)(\})
      captures:
        1: comment.block.html
        2: markup.bold.markdown
        3: comment.block.html

  pandoc-include:
    - match: ^(\!\()(.*)(\))$
      captures:
        1: comment.block.html
        2: markup.underline.link.markdown
        3: comment.block.html
